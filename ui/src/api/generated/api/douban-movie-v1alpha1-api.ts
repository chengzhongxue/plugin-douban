/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DoubanMovie } from '../models';
// @ts-ignore
import type { DoubanMovieList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * DoubanMovieV1alpha1Api - axios parameter creator
 * @export
 */
export const DoubanMovieV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create DoubanMovie
         * @param {DoubanMovie} [doubanMovie] Fresh doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDoubanMovie: async (doubanMovie?: DoubanMovie, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(doubanMovie, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoubanMovie: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteDoubanMovie', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoubanMovie: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getDoubanMovie', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List DoubanMovie
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDoubanMovie1: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDoubanMovie: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchDoubanMovie', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {DoubanMovie} [doubanMovie] Updated doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDoubanMovie: async (name: string, doubanMovie?: DoubanMovie, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateDoubanMovie', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/doubanmovies/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(doubanMovie, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoubanMovieV1alpha1Api - functional programming interface
 * @export
 */
export const DoubanMovieV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DoubanMovieV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create DoubanMovie
         * @param {DoubanMovie} [doubanMovie] Fresh doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDoubanMovie(doubanMovie?: DoubanMovie, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDoubanMovie(doubanMovie, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.createDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDoubanMovie(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDoubanMovie(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.deleteDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoubanMovie(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDoubanMovie(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.getDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List DoubanMovie
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDoubanMovie1(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDoubanMovie1(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.listDoubanMovie1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDoubanMovie(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDoubanMovie(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.patchDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update DoubanMovie
         * @param {string} name Name of doubanmovie
         * @param {DoubanMovie} [doubanMovie] Updated doubanmovie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDoubanMovie(name: string, doubanMovie?: DoubanMovie, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDoubanMovie(name, doubanMovie, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DoubanMovieV1alpha1Api.updateDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DoubanMovieV1alpha1Api - factory interface
 * @export
 */
export const DoubanMovieV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DoubanMovieV1alpha1ApiFp(configuration)
    return {
        /**
         * Create DoubanMovie
         * @param {DoubanMovieV1alpha1ApiCreateDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiCreateDoubanMovieRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovie> {
            return localVarFp.createDoubanMovie(requestParameters.doubanMovie, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete DoubanMovie
         * @param {DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDoubanMovie(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get DoubanMovie
         * @param {DoubanMovieV1alpha1ApiGetDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiGetDoubanMovieRequest, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovie> {
            return localVarFp.getDoubanMovie(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List DoubanMovie
         * @param {DoubanMovieV1alpha1ApiListDoubanMovie1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDoubanMovie1(requestParameters: DoubanMovieV1alpha1ApiListDoubanMovie1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovieList> {
            return localVarFp.listDoubanMovie1(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch DoubanMovie
         * @param {DoubanMovieV1alpha1ApiPatchDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiPatchDoubanMovieRequest, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovie> {
            return localVarFp.patchDoubanMovie(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update DoubanMovie
         * @param {DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovie> {
            return localVarFp.updateDoubanMovie(requestParameters.name, requestParameters.doubanMovie, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDoubanMovie operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiCreateDoubanMovieRequest
 */
export interface DoubanMovieV1alpha1ApiCreateDoubanMovieRequest {
    /**
     * Fresh doubanmovie
     * @type {DoubanMovie}
     * @memberof DoubanMovieV1alpha1ApiCreateDoubanMovie
     */
    readonly doubanMovie?: DoubanMovie
}

/**
 * Request parameters for deleteDoubanMovie operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest
 */
export interface DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest {
    /**
     * Name of doubanmovie
     * @type {string}
     * @memberof DoubanMovieV1alpha1ApiDeleteDoubanMovie
     */
    readonly name: string
}

/**
 * Request parameters for getDoubanMovie operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiGetDoubanMovieRequest
 */
export interface DoubanMovieV1alpha1ApiGetDoubanMovieRequest {
    /**
     * Name of doubanmovie
     * @type {string}
     * @memberof DoubanMovieV1alpha1ApiGetDoubanMovie
     */
    readonly name: string
}

/**
 * Request parameters for listDoubanMovie1 operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiListDoubanMovie1Request
 */
export interface DoubanMovieV1alpha1ApiListDoubanMovie1Request {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof DoubanMovieV1alpha1ApiListDoubanMovie1
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof DoubanMovieV1alpha1ApiListDoubanMovie1
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof DoubanMovieV1alpha1ApiListDoubanMovie1
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof DoubanMovieV1alpha1ApiListDoubanMovie1
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DoubanMovieV1alpha1ApiListDoubanMovie1
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchDoubanMovie operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiPatchDoubanMovieRequest
 */
export interface DoubanMovieV1alpha1ApiPatchDoubanMovieRequest {
    /**
     * Name of doubanmovie
     * @type {string}
     * @memberof DoubanMovieV1alpha1ApiPatchDoubanMovie
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof DoubanMovieV1alpha1ApiPatchDoubanMovie
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateDoubanMovie operation in DoubanMovieV1alpha1Api.
 * @export
 * @interface DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest
 */
export interface DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest {
    /**
     * Name of doubanmovie
     * @type {string}
     * @memberof DoubanMovieV1alpha1ApiUpdateDoubanMovie
     */
    readonly name: string

    /**
     * Updated doubanmovie
     * @type {DoubanMovie}
     * @memberof DoubanMovieV1alpha1ApiUpdateDoubanMovie
     */
    readonly doubanMovie?: DoubanMovie
}

/**
 * DoubanMovieV1alpha1Api - object-oriented interface
 * @export
 * @class DoubanMovieV1alpha1Api
 * @extends {BaseAPI}
 */
export class DoubanMovieV1alpha1Api extends BaseAPI {
    /**
     * Create DoubanMovie
     * @param {DoubanMovieV1alpha1ApiCreateDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public createDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiCreateDoubanMovieRequest = {}, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).createDoubanMovie(requestParameters.doubanMovie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete DoubanMovie
     * @param {DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public deleteDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiDeleteDoubanMovieRequest, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).deleteDoubanMovie(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get DoubanMovie
     * @param {DoubanMovieV1alpha1ApiGetDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public getDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiGetDoubanMovieRequest, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).getDoubanMovie(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List DoubanMovie
     * @param {DoubanMovieV1alpha1ApiListDoubanMovie1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public listDoubanMovie1(requestParameters: DoubanMovieV1alpha1ApiListDoubanMovie1Request = {}, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).listDoubanMovie1(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch DoubanMovie
     * @param {DoubanMovieV1alpha1ApiPatchDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public patchDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiPatchDoubanMovieRequest, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).patchDoubanMovie(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update DoubanMovie
     * @param {DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoubanMovieV1alpha1Api
     */
    public updateDoubanMovie(requestParameters: DoubanMovieV1alpha1ApiUpdateDoubanMovieRequest, options?: RawAxiosRequestConfig) {
        return DoubanMovieV1alpha1ApiFp(this.configuration).updateDoubanMovie(requestParameters.name, requestParameters.doubanMovie, options).then((request) => request(this.axios, this.basePath));
    }
}

