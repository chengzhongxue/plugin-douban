/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DoubanMovieList } from '../models';
// @ts-ignore
import type { DoubanMovieVo } from '../models';
/**
 * ApiDoubanMoonyLaV1alpha1DoubanMovieApi - axios parameter creator
 * @export
 */
export const ApiDoubanMoonyLaV1alpha1DoubanMovieApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * getDoubanDetail.
         * @param {string} [url] doubanmovie url to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoubanDetail: async (url?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.douban.moony.la/v1alpha1/doubanmovies/-/getDoubanDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List doubanMovie.
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] DoubanMovies filtered by keyword.
         * @param {string} [status] DoubanMovies filtered by status.
         * @param {string} [type] DoubanMovies filtered by type.
         * @param {string} [dataType] DoubanMovies filtered by dataType.
         * @param {Array<string>} [genre] DoubanMovies filtered by genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDoubanMovie: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, status?: string, type?: string, dataType?: string, genre?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.douban.moony.la/v1alpha1/doubanmovies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (dataType !== undefined) {
                localVarQueryParameter['dataType'] = dataType;
            }

            if (genre) {
                localVarQueryParameter['genre'] = genre;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all douban genres.
         * @param {string} [type] Genres type to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenres: async (type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.douban.moony.la/v1alpha1/doubanmovies/-/genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiDoubanMoonyLaV1alpha1DoubanMovieApi - functional programming interface
 * @export
 */
export const ApiDoubanMoonyLaV1alpha1DoubanMovieApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiDoubanMoonyLaV1alpha1DoubanMovieApiAxiosParamCreator(configuration)
    return {
        /**
         * getDoubanDetail.
         * @param {string} [url] doubanmovie url to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDoubanDetail(url?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovieVo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDoubanDetail(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiDoubanMoonyLaV1alpha1DoubanMovieApi.getDoubanDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List doubanMovie.
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] DoubanMovies filtered by keyword.
         * @param {string} [status] DoubanMovies filtered by status.
         * @param {string} [type] DoubanMovies filtered by type.
         * @param {string} [dataType] DoubanMovies filtered by dataType.
         * @param {Array<string>} [genre] DoubanMovies filtered by genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDoubanMovie(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, status?: string, type?: string, dataType?: string, genre?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoubanMovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDoubanMovie(page, size, labelSelector, fieldSelector, sort, keyword, status, type, dataType, genre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiDoubanMoonyLaV1alpha1DoubanMovieApi.listDoubanMovie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all douban genres.
         * @param {string} [type] Genres type to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGenres(type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGenres(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiDoubanMoonyLaV1alpha1DoubanMovieApi.listGenres']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiDoubanMoonyLaV1alpha1DoubanMovieApi - factory interface
 * @export
 */
export const ApiDoubanMoonyLaV1alpha1DoubanMovieApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiDoubanMoonyLaV1alpha1DoubanMovieApiFp(configuration)
    return {
        /**
         * getDoubanDetail.
         * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDoubanDetail(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovieVo> {
            return localVarFp.getDoubanDetail(requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * List doubanMovie.
         * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDoubanMovie(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DoubanMovieList> {
            return localVarFp.listDoubanMovie(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.status, requestParameters.type, requestParameters.dataType, requestParameters.genre, options).then((request) => request(axios, basePath));
        },
        /**
         * List all douban genres.
         * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGenres(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listGenres(requestParameters.type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDoubanDetail operation in ApiDoubanMoonyLaV1alpha1DoubanMovieApi.
 * @export
 * @interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest
 */
export interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest {
    /**
     * doubanmovie url to query
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetail
     */
    readonly url?: string
}

/**
 * Request parameters for listDoubanMovie operation in ApiDoubanMoonyLaV1alpha1DoubanMovieApi.
 * @export
 * @interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest
 */
export interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly sort?: Array<string>

    /**
     * DoubanMovies filtered by keyword.
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly keyword?: string

    /**
     * DoubanMovies filtered by status.
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly status?: string

    /**
     * DoubanMovies filtered by type.
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly type?: string

    /**
     * DoubanMovies filtered by dataType.
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly dataType?: string

    /**
     * DoubanMovies filtered by genre.
     * @type {Array<string>}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovie
     */
    readonly genre?: Array<string>
}

/**
 * Request parameters for listGenres operation in ApiDoubanMoonyLaV1alpha1DoubanMovieApi.
 * @export
 * @interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest
 */
export interface ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest {
    /**
     * Genres type to query
     * @type {string}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenres
     */
    readonly type?: string
}

/**
 * ApiDoubanMoonyLaV1alpha1DoubanMovieApi - object-oriented interface
 * @export
 * @class ApiDoubanMoonyLaV1alpha1DoubanMovieApi
 * @extends {BaseAPI}
 */
export class ApiDoubanMoonyLaV1alpha1DoubanMovieApi extends BaseAPI {
    /**
     * getDoubanDetail.
     * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApi
     */
    public getDoubanDetail(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiGetDoubanDetailRequest = {}, options?: RawAxiosRequestConfig) {
        return ApiDoubanMoonyLaV1alpha1DoubanMovieApiFp(this.configuration).getDoubanDetail(requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List doubanMovie.
     * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApi
     */
    public listDoubanMovie(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiListDoubanMovieRequest = {}, options?: RawAxiosRequestConfig) {
        return ApiDoubanMoonyLaV1alpha1DoubanMovieApiFp(this.configuration).listDoubanMovie(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.status, requestParameters.type, requestParameters.dataType, requestParameters.genre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all douban genres.
     * @param {ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDoubanMoonyLaV1alpha1DoubanMovieApi
     */
    public listGenres(requestParameters: ApiDoubanMoonyLaV1alpha1DoubanMovieApiListGenresRequest = {}, options?: RawAxiosRequestConfig) {
        return ApiDoubanMoonyLaV1alpha1DoubanMovieApiFp(this.configuration).listGenres(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}

