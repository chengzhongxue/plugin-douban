/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CronDouban } from '../models';
// @ts-ignore
import type { CronDoubanList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * CronDoubanV1alpha1Api - axios parameter creator
 * @export
 */
export const CronDoubanV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create CronDouban
         * @param {CronDouban} [cronDouban] Fresh crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCronDouban: async (cronDouban?: CronDouban, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cronDouban, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CronDouban
         * @param {string} name Name of crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCronDouban: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteCronDouban', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CronDouban
         * @param {string} name Name of crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCronDouban: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getCronDouban', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List CronDouban
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCronDouban: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch CronDouban
         * @param {string} name Name of crondouban
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCronDouban: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchCronDouban', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CronDouban
         * @param {string} name Name of crondouban
         * @param {CronDouban} [cronDouban] Updated crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCronDouban: async (name: string, cronDouban?: CronDouban, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateCronDouban', 'name', name)
            const localVarPath = `/apis/douban.moony.la/v1alpha1/crondoubans/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cronDouban, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CronDoubanV1alpha1Api - functional programming interface
 * @export
 */
export const CronDoubanV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CronDoubanV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create CronDouban
         * @param {CronDouban} [cronDouban] Fresh crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCronDouban(cronDouban?: CronDouban, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronDouban>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCronDouban(cronDouban, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.createCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete CronDouban
         * @param {string} name Name of crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCronDouban(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCronDouban(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.deleteCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CronDouban
         * @param {string} name Name of crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCronDouban(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronDouban>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCronDouban(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.getCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List CronDouban
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCronDouban(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronDoubanList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCronDouban(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.listCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch CronDouban
         * @param {string} name Name of crondouban
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchCronDouban(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronDouban>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchCronDouban(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.patchCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update CronDouban
         * @param {string} name Name of crondouban
         * @param {CronDouban} [cronDouban] Updated crondouban
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCronDouban(name: string, cronDouban?: CronDouban, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CronDouban>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCronDouban(name, cronDouban, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CronDoubanV1alpha1Api.updateCronDouban']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CronDoubanV1alpha1Api - factory interface
 * @export
 */
export const CronDoubanV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CronDoubanV1alpha1ApiFp(configuration)
    return {
        /**
         * Create CronDouban
         * @param {CronDoubanV1alpha1ApiCreateCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCronDouban(requestParameters: CronDoubanV1alpha1ApiCreateCronDoubanRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CronDouban> {
            return localVarFp.createCronDouban(requestParameters.cronDouban, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CronDouban
         * @param {CronDoubanV1alpha1ApiDeleteCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCronDouban(requestParameters: CronDoubanV1alpha1ApiDeleteCronDoubanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCronDouban(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CronDouban
         * @param {CronDoubanV1alpha1ApiGetCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCronDouban(requestParameters: CronDoubanV1alpha1ApiGetCronDoubanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronDouban> {
            return localVarFp.getCronDouban(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List CronDouban
         * @param {CronDoubanV1alpha1ApiListCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCronDouban(requestParameters: CronDoubanV1alpha1ApiListCronDoubanRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CronDoubanList> {
            return localVarFp.listCronDouban(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch CronDouban
         * @param {CronDoubanV1alpha1ApiPatchCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchCronDouban(requestParameters: CronDoubanV1alpha1ApiPatchCronDoubanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronDouban> {
            return localVarFp.patchCronDouban(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update CronDouban
         * @param {CronDoubanV1alpha1ApiUpdateCronDoubanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCronDouban(requestParameters: CronDoubanV1alpha1ApiUpdateCronDoubanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CronDouban> {
            return localVarFp.updateCronDouban(requestParameters.name, requestParameters.cronDouban, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiCreateCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiCreateCronDoubanRequest {
    /**
     * Fresh crondouban
     * @type {CronDouban}
     * @memberof CronDoubanV1alpha1ApiCreateCronDouban
     */
    readonly cronDouban?: CronDouban
}

/**
 * Request parameters for deleteCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiDeleteCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiDeleteCronDoubanRequest {
    /**
     * Name of crondouban
     * @type {string}
     * @memberof CronDoubanV1alpha1ApiDeleteCronDouban
     */
    readonly name: string
}

/**
 * Request parameters for getCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiGetCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiGetCronDoubanRequest {
    /**
     * Name of crondouban
     * @type {string}
     * @memberof CronDoubanV1alpha1ApiGetCronDouban
     */
    readonly name: string
}

/**
 * Request parameters for listCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiListCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiListCronDoubanRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof CronDoubanV1alpha1ApiListCronDouban
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof CronDoubanV1alpha1ApiListCronDouban
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof CronDoubanV1alpha1ApiListCronDouban
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof CronDoubanV1alpha1ApiListCronDouban
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof CronDoubanV1alpha1ApiListCronDouban
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiPatchCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiPatchCronDoubanRequest {
    /**
     * Name of crondouban
     * @type {string}
     * @memberof CronDoubanV1alpha1ApiPatchCronDouban
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof CronDoubanV1alpha1ApiPatchCronDouban
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateCronDouban operation in CronDoubanV1alpha1Api.
 * @export
 * @interface CronDoubanV1alpha1ApiUpdateCronDoubanRequest
 */
export interface CronDoubanV1alpha1ApiUpdateCronDoubanRequest {
    /**
     * Name of crondouban
     * @type {string}
     * @memberof CronDoubanV1alpha1ApiUpdateCronDouban
     */
    readonly name: string

    /**
     * Updated crondouban
     * @type {CronDouban}
     * @memberof CronDoubanV1alpha1ApiUpdateCronDouban
     */
    readonly cronDouban?: CronDouban
}

/**
 * CronDoubanV1alpha1Api - object-oriented interface
 * @export
 * @class CronDoubanV1alpha1Api
 * @extends {BaseAPI}
 */
export class CronDoubanV1alpha1Api extends BaseAPI {
    /**
     * Create CronDouban
     * @param {CronDoubanV1alpha1ApiCreateCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public createCronDouban(requestParameters: CronDoubanV1alpha1ApiCreateCronDoubanRequest = {}, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).createCronDouban(requestParameters.cronDouban, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CronDouban
     * @param {CronDoubanV1alpha1ApiDeleteCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public deleteCronDouban(requestParameters: CronDoubanV1alpha1ApiDeleteCronDoubanRequest, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).deleteCronDouban(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CronDouban
     * @param {CronDoubanV1alpha1ApiGetCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public getCronDouban(requestParameters: CronDoubanV1alpha1ApiGetCronDoubanRequest, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).getCronDouban(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List CronDouban
     * @param {CronDoubanV1alpha1ApiListCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public listCronDouban(requestParameters: CronDoubanV1alpha1ApiListCronDoubanRequest = {}, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).listCronDouban(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch CronDouban
     * @param {CronDoubanV1alpha1ApiPatchCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public patchCronDouban(requestParameters: CronDoubanV1alpha1ApiPatchCronDoubanRequest, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).patchCronDouban(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CronDouban
     * @param {CronDoubanV1alpha1ApiUpdateCronDoubanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CronDoubanV1alpha1Api
     */
    public updateCronDouban(requestParameters: CronDoubanV1alpha1ApiUpdateCronDoubanRequest, options?: RawAxiosRequestConfig) {
        return CronDoubanV1alpha1ApiFp(this.configuration).updateCronDouban(requestParameters.name, requestParameters.cronDouban, options).then((request) => request(this.axios, this.basePath));
    }
}

